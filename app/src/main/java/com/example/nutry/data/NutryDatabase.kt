package com.example.nutry.data

import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import android.content.Context
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.nutry.data.dao.*
import com.example.nutry.data.entities.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch

@Database(
    entities = [
        Category::class,
        Ingredient::class,
        Dish::class,
        DishIngredient::class,
        TrackEntry::class,
        Settings::class
    ],
    version = 1,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class NutryDatabase : RoomDatabase() {

    abstract fun categoryDao(): CategoryDao
    abstract fun ingredientDao(): IngredientDao
    abstract fun dishDao(): DishDao
    abstract fun trackDao(): TrackDao
    abstract fun settingsDao(): SettingsDao

    companion object {
        @Volatile
        private var INSTANCE: NutryDatabase? = null

        fun getDatabase(context: Context, scope: CoroutineScope): NutryDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    NutryDatabase::class.java,
                    "nutry_database"
                )
                    .addCallback(NutryDatabaseCallback(scope))
                    .build()
                INSTANCE = instance
                instance
            }
        }

        private class NutryDatabaseCallback(
            private val scope: CoroutineScope
        ) : RoomDatabase.Callback() {

            override fun onCreate(db: SupportSQLiteDatabase) {
                super.onCreate(db)
                INSTANCE?.let { database ->
                    scope.launch {
                        populateDatabase(database)
                    }
                }
            }
        }

        suspend fun populateDatabase(database: NutryDatabase) {
            val settingsDao = database.settingsDao()
            val categoryDao = database.categoryDao()
            val ingredientDao = database.ingredientDao()
            val dishDao = database.dishDao()

            // Insert default settings
            settingsDao.insertSettings(Settings())
            
            // Insert categories
            val vegetablesId = categoryDao.insertCategory(Category(name = "–ó–µ–ª–µ–Ω—á—É—Ü–∏", emoji = "ü•¨"))
            val fruitsId = categoryDao.insertCategory(Category(name = "–ü–ª–æ–¥–æ–≤–µ", emoji = "üçé"))
            val grainsId = categoryDao.insertCategory(Category(name = "–ó—ä—Ä–Ω–µ–Ω–∏ –∏ —Ç–µ—Å—Ç–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üçû"))
            val spicesId = categoryDao.insertCategory(Category(name = "–ü–æ–¥–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥–ø—Ä–∞–≤—ä—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üßÇ"))
            val fatsId = categoryDao.insertCategory(Category(name = "–ú–∞–∑–Ω–∏–Ω–∏", emoji = "üßà"))
            val meatId = categoryDao.insertCategory(Category(name = "–ú–µ—Å–æ –∏ –º–µ—Å–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "ü•©"))
            val fishId = categoryDao.insertCategory(Category(name = "–†–∏–±–∞ –∏ –º–æ—Ä—Å–∫–∏ –¥–∞—Ä–æ–≤–µ", emoji = "üêü"))
            val dairyId = categoryDao.insertCategory(Category(name = "–ú–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ —è–π—Ü–∞", emoji = "ü•ö"))
            val sweetsId = categoryDao.insertCategory(Category(name = "–ó–∞—Ö–∞—Ä–Ω–∏ –∏ —Å–ª–∞–¥–∫–∞—Ä—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üç¨"))
            val nutsId = categoryDao.insertCategory(Category(name = "–Ø–¥–∫–∏ –∏ —Å–µ–º–µ–Ω–∞", emoji = "ü•ú"))
            
            // Insert vegetables
            val vegetableNames = listOf(
                "–ö–∞—Ä—Ç–æ—Ñ–∏", "–ú–æ—Ä–∫–æ–≤–∏", "–õ—É–∫ (–∂—ä–ª—Ç, —á–µ—Ä–≤–µ–Ω, –∑–µ–ª–µ–Ω)", "–ß–µ—Å—ä–Ω", "–î–æ–º–∞—Ç", "–ö—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞",
                "–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)", "–ó–µ–ª–µ", "–ö–∞—Ä—Ñ–∏–æ–ª", "–ë—Ä–æ–∫–æ–ª–∏", "–¢–∏–∫–≤–∏—á–∫–∏", "–ü–∞—Ç–ª–∞–¥–∂–∞–Ω",
                "–¢–∏–∫–≤–∞", "–°–ø–∞–Ω–∞–∫", "–õ–∞–ø–∞–¥", "–ö–∏—Å–µ–ª–µ—Ü", "–ì—Ä–∞—Ö", "–ó–µ–ª–µ–Ω —Ñ–∞—Å—É–ª", "–¶–µ–ª–∏–Ω–∞", "–†—è–ø–∞",
                "–ê—Å–ø–µ—Ä–∂–∏", "–†—É–∫–æ–ª–∞", "–ê–π—Å–±–µ—Ä–≥", "–°–∞–ª–∞—Ç–∞ (–∑–µ–ª–µ–Ω–∞, –º–∞—Ä—É–ª—è, —Ä–æ–º–∞–Ω–∞)", "–¶–∞—Ä–µ–≤–∏—Ü–∞ (–∏ –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–∞–Ω–∞)"
            )
            vegetableNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = vegetablesId.toInt()))
            }
            
            // Insert fruits
            val fruitNames = listOf(
                "–Ø–±—ä–ª–∫–∞", "–ö—Ä—É—à–∞", "–ë–∞–Ω–∞–Ω", "–ü–æ—Ä—Ç–æ–∫–∞–ª", "–õ–∏–º–æ–Ω", "–ú–∞–Ω–¥–∞—Ä–∏–Ω–∞", "–ö–∏–≤–∏", "–Ø–≥–æ–¥–∞",
                "–ú–∞–ª–∏–Ω–∞", "–ö—ä–ø–∏–Ω–∞", "–ë–æ—Ä–æ–≤–∏–Ω–∫–∞", "–ß–µ—Ä–µ—à–∞", "–í–∏—à–Ω–∞", "–ü—Ä–∞—Å–∫–æ–≤–∞", "–ö–∞–π—Å–∏—è", "–°–ª–∏–≤–∞",
                "–ì—Ä–æ–∑–¥–µ", "–°–º–æ–∫–∏–Ω—è", "–ù–∞—Ä", "–ê–≤–æ–∫–∞–¥–æ", "–ê–Ω–∞–Ω–∞—Å", "–ú–∞–Ω–≥–æ", "–ü—ä–ø–µ—à", "–î–∏–Ω—è", "–õ–∞–π–º"
            )
            fruitNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fruitsId.toInt()))
            }
            
            // Insert grains
            val grainNames = listOf(
                "–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–¶–∞—Ä–µ–≤–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–û–≤–µ—Å–µ–Ω–∏ —è–¥–∫–∏", "–ï–ª–¥–∞", "–ö–∏–Ω–æ–∞", "–ë—É–ª–≥—É—Ä",
                "–û—Ä–∏–∑ (–±—è–ª, –∫–∞—Ñ—è–≤, –∂–∞—Å–º–∏–Ω–æ–≤, –±–∞—Å–º–∞—Ç–∏)", "–•–ª—è–± (–±—è–ª, —Ä—ä–∂–µ–Ω, –ø—ä–ª–Ω–æ–∑—ä—Ä–Ω–µ—Å—Ç)", "–ú–∞–∫–∞—Ä–æ–Ω–∏ / –ø–∞—Å—Ç–∞",
                "–°–ø–∞–≥–µ—Ç–∏", "–ö–æ—Ä–Ω—Ñ–ª–µ–π–∫—Å", "–ö—É—Å–∫—É—Å"
            )
            grainNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = grainsId.toInt()))
            }
            
            // Insert spices
            val spiceNames = listOf(
                "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä", "–ß–µ—Ä–≤–µ–Ω –ø–∏–ø–µ—Ä (—Å–ª–∞–¥—ä–∫, –ª—é—Ç)", "–ö–∏–º–∏–æ–Ω", "–ö–∞–Ω–µ–ª–∞", "–î–∂–∏–Ω–¥–∂–∏—Ñ–∏–ª",
                "–ö–∞—Ä–∞–º—Ñ–∏–ª", "–ö–∞—Ä–¥–∞–º–æ–Ω", "–î–∞—Ñ–∏–Ω–æ–≤ –ª–∏—Å—Ç", "–ò–Ω–¥–∏–π—Å–∫–æ –æ—Ä–µ—Ö—á–µ", "–í–∞–Ω–∏–ª–∏—è", "–†–∏–≥–∞–Ω", "–ë–æ—Å–∏–ª–µ–∫",
                "–ú–∞—â–µ—Ä–∫–∞", "–ß—É–±—Ä–∏—Ü–∞", "–ú–∞–≥–¥–∞–Ω–æ–∑", "–ö–æ–ø—ä—Ä", "–†–æ–∑–º–∞—Ä–∏–Ω", "–ì–æ—Ä—á–∏—Ü–∞", "–õ—é—Ç–µ–Ω–∏—Ü–∞", "–•—Ä—è–Ω",
                "–°–æ–µ–≤ —Å–æ—Å", "–ë–∞–ª—Å–∞–º–æ–≤ –æ—Ü–µ—Ç", "–Ø–±—ä–ª–∫–æ–≤ –æ—Ü–µ—Ç", "–í–∏–Ω–µ–Ω –æ—Ü–µ—Ç"
            )
            spiceNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = spicesId.toInt()))
            }
            
            // Insert fats
            val fatNames = listOf(
                "–û–ª–∏–æ", "–ó–µ—Ö—Ç–∏–Ω", "–ú–∞—Å–ª–æ", "–ö—Ä–∞–≤–µ –º–∞—Å", "–ö–æ–∫–æ—Å–æ–≤–æ –º–∞—Å–ª–æ", "–ü–∞–ª–º–æ–≤–æ –º–∞—Å–ª–æ", "–ú–∞—Ä–≥–∞—Ä–∏–Ω"
            )
            fatNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fatsId.toInt()))
            }
            
            // Insert meat
            val meatNames = listOf(
                "–°–≤–∏–Ω—Å–∫–æ –º–µ—Å–æ", "–¢–µ–ª–µ—à–∫–æ –º–µ—Å–æ", "–ê–≥–Ω–µ—à–∫–æ", "–ü–∏–ª–µ—à–∫–æ –º–µ—Å–æ", "–ü—É–π–∫–∞", "–ö–∞–π–º–∞ (—Å–º–µ—Å, —Å–≤–∏–Ω—Å–∫–∞, —Ç–µ–ª–µ—à–∫–∞)",
                "–ù–∞–¥–µ–Ω–∏—Ü–∞", "–°–∞–ª–∞–º", "–®—É–Ω–∫–∞", "–ë–µ–∫–æ–Ω", "–õ—É–∫–∞–Ω–∫–∞", "–°–∞–∑–¥—ä—Ä–º–∞", "–ß–µ—Ä–≤–µ–Ω –¥—Ä–æ–±"
            )
            meatNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = meatId.toInt()))
            }
            
            // Insert fish
            val fishNames = listOf(
                "–°–∫—É–º—Ä–∏—è", "–ü—ä—Å—Ç—ä—Ä–≤–∞", "–°—å–æ–º–≥–∞", "–†–∏–±–∞ —Ç–æ–Ω", "–•–µ–∫", "–ö–∞–ª–º–∞—Ä–∏", "–°–∫–∞—Ä–∏–¥–∏", "–ú–∏–¥–∏", "–û–∫—Ç–æ–ø–æ–¥", "–¶–∞—Ü–∞", "–•–µ—Ä–∏–Ω–≥–∞"
            )
            fishNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fishId.toInt()))
            }
            
            // Insert dairy
            val dairyNames = listOf(
                "–ü—Ä—è—Å–Ω–æ –º–ª—è–∫–æ", "–ö–∏—Å–µ–ª–æ –º–ª—è–∫–æ", "–°–∏—Ä–µ–Ω–µ (–±—è–ª–æ —Å–∞–ª–∞–º—É—Ä–µ–Ω–æ, –∫—Ä–∞–≤–µ, –æ–≤—á–µ, –∫–æ–∑–µ)", "–ö–∞—à–∫–∞–≤–∞–ª",
                "–ò–∑–≤–∞—Ä–∞", "–°–º–µ—Ç–∞–Ω–∞ (–≥–æ—Ç–≤–∞—Ä—Å–∫–∞, —Å–ª–∞–¥–∫–∞—Ä—Å–∫–∞)", "–ú–∞—Å–∫–∞—Ä–ø–æ–Ω–µ", "–†–∏–∫–æ—Ç–∞", "–Ø–π—Ü–∞ (–∫–æ–∫–æ—à–∏, –ø—ä–¥–ø—ä–¥—ä—á–∏)"
            )
            dairyNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = dairyId.toInt()))
            }
            
            // Insert sweets
            val sweetNames = listOf(
                "–ó–∞—Ö–∞—Ä (–±—è–ª–∞, –∫–∞—Ñ—è–≤–∞, –ø—É–¥—Ä–∞)", "–ú–µ–¥", "–ú–µ–ª–∞—Å–∞", "–®–æ–∫–æ–ª–∞–¥", "–ö–∞–∫–∞–æ", "–°–ª–∞–¥–∫–∞—Ä—Å–∫–∏ –±–æ–∏",
                "–í–∞–Ω–∏–ª–æ–≤–∞ –∑–∞—Ö–∞—Ä", "–ë–∞–∫–ø—É–ª–≤–µ—Ä", "–°–æ–¥–∞ –±–∏–∫–∞—Ä–±–æ–Ω–∞—Ç", "–ñ–µ–ª–∞—Ç–∏–Ω", "–í–∞—Ñ–ª–∏", "–ë–∏—Å–∫–≤–∏—Ç–∏",
                "–ö–æ–Ω–¥–µ–Ω–∑–∏—Ä–∞–Ω–æ –º–ª—è–∫–æ", "–°–ª–∞–¥–∫–æ", "–ú–∞—Ä–º–∞–ª–∞–¥"
            )
            sweetNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = sweetsId.toInt()))
            }
            
            // Insert nuts
            val nutNames = listOf(
                "–û—Ä–µ—Ö–∏", "–ë–∞–¥–µ–º–∏", "–õ–µ—à–Ω–∏—Ü–∏", "–§—ä—Å—Ç—ä—Ü–∏", "–ö–∞—à—É", "–°–ª—ä–Ω—á–æ–≥–ª–µ–¥–æ–≤–∏ —Å–µ–º–∫–∏", "–¢–∏–∫–≤–µ–Ω–∏ —Å–µ–º–∫–∏",
                "–ß–∏—è", "–õ–µ–Ω–µ–Ω–æ —Å–µ–º–µ", "–ö–µ–¥—Ä–æ–≤–∏ —è–¥–∫–∏", "–ö–æ–∫–æ—Å–æ–≤–∏ —Å—Ç—ä—Ä–≥–æ—Ç–∏–Ω–∏"
            )
            nutNames.forEach { name ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = nutsId.toInt()))
            }
            
            // Insert dishes
            val dishNames = listOf(
                "–ü—ä—Ä–∂–µ–Ω–∏ –ö–∞—Ä—Ç–æ—Ñ–∏" to "üçü", "–ß—É—à–∫–∏ –ë—é—Ä–µ–∫" to "ü•ô", "–ú–∏—à –ú–∞—à" to "üç≥", "–¢–∞—Ä–∞—Ç–æ—Ä" to "ü•í",
                "–¢–∏–∫–≤–∏—á–∫–∏" to "ü•í", "–ì—Ä–∞—Ö–æ–≤–∞ –º–∞–Ω–¥–∂–∞" to "üç≤", "–ó–µ–ª–µ–Ω –±–æ–±" to "ü•ó", "–°–ø–∞–Ω–∞–∫" to "ü•¨",
                "–ü–ò–¶–ê" to "üçï", "–ö—É—Å-–∫—É—Å" to "üçö", "–ú–∞–∫–∞—Ä–æ–Ω–∏" to "üçù", "–°–ø–∞–≥–µ—Ç–∏" to "üçù",
                "–û–≤–µ—Å —Å –º–ª—è–∫–æ" to "ü•£", "–ú—é—Å–ª–∏" to "ü•£", "–ü–∞–ª–∞—á–∏–Ω–∫–∏" to "ü•û", "–ë–æ–±" to "ü´ò",
                "–õ–µ—â–∞" to "ü´ò", "–ü—ä—Ä–∂–µ–Ω–∏ —Ñ–∏–ª–∏–π–∫–∏" to "üçû", "–ë–∞–Ω–∏—Ü–∞" to "ü•ê", "–ë—É—Ç–µ—Ä–∫–∏" to "ü•™",
                "–ì—é–∑–ª–µ–º–µ" to "ü•ô", "–ö–∞—à–∫–∞–≤–∞–ª" to "üßÄ", "–°–∏—Ä–µ–Ω–µ" to "üßÄ", "–ú–∞—Ä–≥–∞—Ä–∏–Ω" to "üßà",
                "–ó–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏" to "üç≤", "–ì—é–≤–µ—á–µ —Å –∫–∞—à–∫–∞–≤–∞–ª –∏ —Å–æ—Å –±–∞—Ä–±–µ–∫—é" to "üç≤",
                "–ö—Ä–µ–º —Å—É–ø–∞ —Å –∫—Ä–æ—Ç–æ–Ω–∏" to "üç≤", "–ó–µ–ª–µ–Ω—á—É–∫–æ–≤–æ –∫—ä—Ä–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –≥—Ä–∞—Ö" to "üçõ",
                "–ü–µ—á–µ–Ω–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏ —Å –∫–∞—à–∫–∞–≤–∞–ª" to "ü•ó", "–¢–∏–∫–≤–µ–Ω–∏–∫" to "ü•ß", "–°–º–µ—Ç–∞–Ω–∞" to "ü•õ",
                "–®–æ–∫–æ–ª–∞–¥" to "üç´", "–ö–∞–∫–∞–æ" to "‚òï"
            )
            dishNames.forEach { (name, emoji) ->
                dishDao.insertDish(Dish(name = name, emoji = emoji))
            }
        }
    }
}