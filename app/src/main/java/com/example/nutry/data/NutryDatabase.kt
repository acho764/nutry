package com.example.nutry.data

import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.room.migration.Migration
import android.content.Context
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.nutry.data.dao.*
import com.example.nutry.data.entities.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch

@Database(
    entities = [
        Category::class,
        Ingredient::class,
        Dish::class,
        DishIngredient::class,
        TrackEntry::class,
        Settings::class
    ],
    version = 6,
    exportSchema = false
)
@TypeConverters(Converters::class)
abstract class NutryDatabase : RoomDatabase() {

    abstract fun categoryDao(): CategoryDao
    abstract fun ingredientDao(): IngredientDao
    abstract fun dishDao(): DishDao
    abstract fun trackDao(): TrackDao
    abstract fun settingsDao(): SettingsDao

    companion object {
        @Volatile
        private var INSTANCE: NutryDatabase? = null

        private val MIGRATION_4_5 = object : Migration(4, 5) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Add lastEaten column to ingredients table
                database.execSQL("ALTER TABLE ingredients ADD COLUMN lastEaten INTEGER")
            }
        }

        private val MIGRATION_5_6 = object : Migration(5, 6) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // Add excludeSpices column to settings table
                database.execSQL("ALTER TABLE settings ADD COLUMN excludeSpices INTEGER NOT NULL DEFAULT 0")
            }
        }

        fun getDatabase(context: Context, scope: CoroutineScope): NutryDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    NutryDatabase::class.java,
                    "nutry_database"
                )
                    .addCallback(NutryDatabaseCallback(scope))
                    .addMigrations(MIGRATION_4_5, MIGRATION_5_6)
                    .fallbackToDestructiveMigration()
                    .build()
                INSTANCE = instance
                instance
            }
        }

        private class NutryDatabaseCallback(
            private val scope: CoroutineScope
        ) : RoomDatabase.Callback() {

            override fun onCreate(db: SupportSQLiteDatabase) {
                super.onCreate(db)
                INSTANCE?.let { database ->
                    scope.launch {
                        populateDatabase(database)
                    }
                }
            }
        }

        suspend fun populateDatabase(database: NutryDatabase) {
            val settingsDao = database.settingsDao()
            val categoryDao = database.categoryDao()
            val ingredientDao = database.ingredientDao()
            val dishDao = database.dishDao()

            // Insert default settings
            settingsDao.insertSettings(Settings())
            
            // Insert categories
            val vegetablesId = categoryDao.insertCategory(Category(name = "–ó–µ–ª–µ–Ω—á—É—Ü–∏", emoji = "ü•¨"))
            val fruitsId = categoryDao.insertCategory(Category(name = "–ü–ª–æ–¥–æ–≤–µ", emoji = "üçé"))
            val grainsId = categoryDao.insertCategory(Category(name = "–ó—ä—Ä–Ω–µ–Ω–∏ –∏ —Ç–µ—Å—Ç–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üçû"))
            val spicesId = categoryDao.insertCategory(Category(name = "–ü–æ–¥–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥–ø—Ä–∞–≤—ä—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üßÇ"))
            val fatsId = categoryDao.insertCategory(Category(name = "–ú–∞–∑–Ω–∏–Ω–∏", emoji = "üßà"))
            val meatId = categoryDao.insertCategory(Category(name = "–ú–µ—Å–æ –∏ –º–µ—Å–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "ü•©"))
            val fishId = categoryDao.insertCategory(Category(name = "–†–∏–±–∞ –∏ –º–æ—Ä—Å–∫–∏ –¥–∞—Ä–æ–≤–µ", emoji = "üêü"))
            val dairyId = categoryDao.insertCategory(Category(name = "–ú–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ —è–π—Ü–∞", emoji = "ü•ö"))
            val sweetsId = categoryDao.insertCategory(Category(name = "–ó–∞—Ö–∞—Ä–Ω–∏ –∏ —Å–ª–∞–¥–∫–∞—Ä—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", emoji = "üç¨"))
            val nutsId = categoryDao.insertCategory(Category(name = "–Ø–¥–∫–∏ –∏ —Å–µ–º–µ–Ω–∞", emoji = "ü•ú"))
            
            // Insert vegetables
            val vegetableItems = listOf(
                "–ö–∞—Ä—Ç–æ—Ñ–∏" to "ü•î", "–ú–æ—Ä–∫–æ–≤–∏" to "ü•ï", "–õ—É–∫ (–∂—ä–ª—Ç, —á–µ—Ä–≤–µ–Ω, –∑–µ–ª–µ–Ω)" to "üßÖ", "–ß–µ—Å—ä–Ω" to "üßÑ", 
                "–î–æ–º–∞—Ç" to "üçÖ", "–ö—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞" to "ü•í", "–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)" to "üå∂Ô∏è", "–ó–µ–ª–µ" to "ü•¨", 
                "–ö–∞—Ä—Ñ–∏–æ–ª" to "ü•¨", "–ë—Ä–æ–∫–æ–ª–∏" to "ü•¶", "–¢–∏–∫–≤–∏—á–∫–∏" to "ü•í", "–ü–∞—Ç–ª–∞–¥–∂–∞–Ω" to "üçÜ",
                "–¢–∏–∫–≤–∞" to "üéÉ", "–°–ø–∞–Ω–∞–∫" to "ü•¨", "–õ–∞–ø–∞–¥" to "ü•¨", "–ö–∏—Å–µ–ª–µ—Ü" to "ü•¨", 
                "–ì—Ä–∞—Ö" to "üü¢", "–ó–µ–ª–µ–Ω —Ñ–∞—Å—É–ª" to "ü´õ", "–¶–µ–ª–∏–Ω–∞" to "ü•¨", "–†—è–ø–∞" to "ü•¨",
                "–ê—Å–ø–µ—Ä–∂–∏" to "ü•¨", "–†—É–∫–æ–ª–∞" to "ü•¨", "–ê–π—Å–±–µ—Ä–≥" to "ü•¨", "–°–∞–ª–∞—Ç–∞ (–∑–µ–ª–µ–Ω–∞, –º–∞—Ä—É–ª—è, —Ä–æ–º–∞–Ω–∞)" to "ü•¨", 
                "–¶–∞—Ä–µ–≤–∏—Ü–∞ (–∏ –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–∞–Ω–∞)" to "üåΩ", "–ë–æ–±" to "ü´ò", "–õ–µ—â–∞" to "ü´ò", 
                "–ó–µ–ª–µ–Ω—á—É—Ü–∏ (–º–∏–∫—Å)" to "ü•ó", "–í–æ–¥–∞" to "üíß"
            )
            vegetableItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = vegetablesId.toInt(), emoji = emoji))
            }
            
            // Insert fruits
            val fruitItems = listOf(
                "–Ø–±—ä–ª–∫–∞" to "üçé", "–ö—Ä—É—à–∞" to "üçê", "–ë–∞–Ω–∞–Ω" to "üçå", "–ü–æ—Ä—Ç–æ–∫–∞–ª" to "üçä", 
                "–õ–∏–º–æ–Ω" to "üçã", "–ú–∞–Ω–¥–∞—Ä–∏–Ω–∞" to "üçä", "–ö–∏–≤–∏" to "ü•ù", "–Ø–≥–æ–¥–∞" to "üçì",
                "–ú–∞–ª–∏–Ω–∞" to "ü´ê", "–ö—ä–ø–∏–Ω–∞" to "ü´ê", "–ë–æ—Ä–æ–≤–∏–Ω–∫–∞" to "ü´ê", "–ß–µ—Ä–µ—à–∞" to "üçí", 
                "–í–∏—à–Ω–∞" to "üçí", "–ü—Ä–∞—Å–∫–æ–≤–∞" to "üçë", "–ö–∞–π—Å–∏—è" to "üçë", "–°–ª–∏–≤–∞" to "üü£",
                "–ì—Ä–æ–∑–¥–µ" to "üçá", "–°–º–æ–∫–∏–Ω—è" to "üü§", "–ù–∞—Ä" to "üî¥", "–ê–≤–æ–∫–∞–¥–æ" to "ü•ë", 
                "–ê–Ω–∞–Ω–∞—Å" to "üçç", "–ú–∞–Ω–≥–æ" to "ü•≠", "–ü—ä–ø–µ—à" to "üçà", "–î–∏–Ω—è" to "üçâ", "–õ–∞–π–º" to "üçã",
                "–ü–ª–æ–¥–æ–≤–µ (–º–∏–∫—Å)" to "üçé"
            )
            fruitItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fruitsId.toInt(), emoji = emoji))
            }
            
            // Insert grains
            val grainItems = listOf(
                "–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ" to "üåæ", "–¶–∞—Ä–µ–≤–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ" to "üåΩ", "–û–≤–µ—Å–µ–Ω–∏ —è–¥–∫–∏" to "üåæ", 
                "–ï–ª–¥–∞" to "üåæ", "–ö–∏–Ω–æ–∞" to "üåæ", "–ë—É–ª–≥—É—Ä" to "üåæ",
                "–û—Ä–∏–∑ (–±—è–ª, –∫–∞—Ñ—è–≤, –∂–∞—Å–º–∏–Ω–æ–≤, –±–∞—Å–º–∞—Ç–∏)" to "üçö", "–•–ª—è–± (–±—è–ª, —Ä—ä–∂–µ–Ω, –ø—ä–ª–Ω–æ–∑—ä—Ä–Ω–µ—Å—Ç)" to "üçû", 
                "–ú–∞–∫–∞—Ä–æ–Ω–∏ / –ø–∞—Å—Ç–∞" to "üçù", "–°–ø–∞–≥–µ—Ç–∏" to "üçù", "–ö–æ—Ä–Ω—Ñ–ª–µ–π–∫—Å" to "ü•£", "–ö—É—Å–∫—É—Å" to "üçö",
                "–û–≤–µ—Å" to "üåæ", "–ú—é—Å–ª–∏" to "ü•£", "–ú–∞—è" to "üçû", "–ö–æ—Ä–∏ –∑–∞ –±–∞–Ω–∏—Ü–∞" to "ü•ê"
            )
            grainItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = grainsId.toInt(), emoji = emoji))
            }
            
            // Insert spices
            val spiceItems = listOf(
                "–°–æ–ª" to "üßÇ", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä" to "ü´ö", "–ß–µ—Ä–≤–µ–Ω –ø–∏–ø–µ—Ä (—Å–ª–∞–¥—ä–∫, –ª—é—Ç)" to "üå∂Ô∏è", 
                "–ö–∏–º–∏–æ–Ω" to "üßÇ", "–ö–∞–Ω–µ–ª–∞" to "üü§", "–î–∂–∏–Ω–¥–∂–∏—Ñ–∏–ª" to "ü´ö",
                "–ö–∞—Ä–∞–º—Ñ–∏–ª" to "üü§", "–ö–∞—Ä–¥–∞–º–æ–Ω" to "üü§", "–î–∞—Ñ–∏–Ω–æ–≤ –ª–∏—Å—Ç" to "üåø", 
                "–ò–Ω–¥–∏–π—Å–∫–æ –æ—Ä–µ—Ö—á–µ" to "üü§", "–í–∞–Ω–∏–ª–∏—è" to "üü§", "–†–∏–≥–∞–Ω" to "üåø", "–ë–æ—Å–∏–ª–µ–∫" to "üåø",
                "–ú–∞—â–µ—Ä–∫–∞" to "üåø", "–ß—É–±—Ä–∏—Ü–∞" to "üåø", "–ú–∞–≥–¥–∞–Ω–æ–∑" to "üåø", "–ö–æ–ø—ä—Ä" to "üåø", 
                "–†–æ–∑–º–∞—Ä–∏–Ω" to "üåø", "–ì–æ—Ä—á–∏—Ü–∞" to "üü°", "–õ—é—Ç–µ–Ω–∏—Ü–∞" to "üî¥", "–•—Ä—è–Ω" to "‚ö™",
                "–°–æ–µ–≤ —Å–æ—Å" to "üü§", "–ë–∞–ª—Å–∞–º–æ–≤ –æ—Ü–µ—Ç" to "üü§", "–Ø–±—ä–ª–∫–æ–≤ –æ—Ü–µ—Ç" to "üü°", "–í–∏–Ω–µ–Ω –æ—Ü–µ—Ç" to "üç∑",
                "–ö—ä—Ä–∏" to "üå∂Ô∏è"
            )
            spiceItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = spicesId.toInt(), emoji = emoji))
            }
            
            // Insert fats
            val fatItems = listOf(
                "–û–ª–∏–æ" to "ü´í", "–ó–µ—Ö—Ç–∏–Ω" to "ü´í", "–ú–∞—Å–ª–æ" to "üßà", "–ö—Ä–∞–≤–µ –º–∞—Å" to "üßà", 
                "–ö–æ–∫–æ—Å–æ–≤–æ –º–∞—Å–ª–æ" to "ü••", "–ü–∞–ª–º–æ–≤–æ –º–∞—Å–ª–æ" to "ü´í", "–ú–∞—Ä–≥–∞—Ä–∏–Ω" to "üßà",
                "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ" to "ü´í", "–ö–æ–∫–æ—Å–æ–≤–æ –º–ª—è–∫–æ" to "ü••"
            )
            fatItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fatsId.toInt(), emoji = emoji))
            }
            
            // Insert meat
            val meatItems = listOf(
                "–°–≤–∏–Ω—Å–∫–æ –º–µ—Å–æ" to "ü•©", "–¢–µ–ª–µ—à–∫–æ –º–µ—Å–æ" to "ü•©", "–ê–≥–Ω–µ—à–∫–æ" to "ü•©", 
                "–ü–∏–ª–µ—à–∫–æ –º–µ—Å–æ" to "üçó", "–ü—É–π–∫–∞" to "üçó", "–ö–∞–π–º–∞ (—Å–º–µ—Å, —Å–≤–∏–Ω—Å–∫–∞, —Ç–µ–ª–µ—à–∫–∞)" to "ü•©",
                "–ù–∞–¥–µ–Ω–∏—Ü–∞" to "üå≠", "–°–∞–ª–∞–º" to "ü•ì", "–®—É–Ω–∫–∞" to "ü•ì", "–ë–µ–∫–æ–Ω" to "ü•ì", 
                "–õ—É–∫–∞–Ω–∫–∞" to "ü•ì", "–°–∞–∑–¥—ä—Ä–º–∞" to "üå≠", "–ß–µ—Ä–≤–µ–Ω –¥—Ä–æ–±" to "ü•©"
            )
            meatItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = meatId.toInt(), emoji = emoji))
            }
            
            // Insert fish
            val fishItems = listOf(
                "–°–∫—É–º—Ä–∏—è" to "üêü", "–ü—ä—Å—Ç—ä—Ä–≤–∞" to "üêü", "–°—å–æ–º–≥–∞" to "üêü", "–†–∏–±–∞ —Ç–æ–Ω" to "üêü", 
                "–•–µ–∫" to "üêü", "–ö–∞–ª–º–∞—Ä–∏" to "ü¶ë", "–°–∫–∞—Ä–∏–¥–∏" to "üç§", "–ú–∏–¥–∏" to "ü¶™", 
                "–û–∫—Ç–æ–ø–æ–¥" to "üêô", "–¶–∞—Ü–∞" to "üêü", "–•–µ—Ä–∏–Ω–≥–∞" to "üêü"
            )
            fishItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = fishId.toInt(), emoji = emoji))
            }
            
            // Insert dairy
            val dairyItems = listOf(
                "–ü—Ä—è—Å–Ω–æ –º–ª—è–∫–æ" to "ü•õ", "–ö–∏—Å–µ–ª–æ –º–ª—è–∫–æ" to "ü•õ", "–°–∏—Ä–µ–Ω–µ (–±—è–ª–æ —Å–∞–ª–∞–º—É—Ä–µ–Ω–æ, –∫—Ä–∞–≤–µ, –æ–≤—á–µ, –∫–æ–∑–µ)" to "üßÄ", 
                "–ö–∞—à–∫–∞–≤–∞–ª" to "üßÄ", "–ò–∑–≤–∞—Ä–∞" to "üßÄ", "–°–º–µ—Ç–∞–Ω–∞ (–≥–æ—Ç–≤–∞—Ä—Å–∫–∞, —Å–ª–∞–¥–∫–∞—Ä—Å–∫–∞)" to "ü•õ", 
                "–ú–∞—Å–∫–∞—Ä–ø–æ–Ω–µ" to "üßÄ", "–†–∏–∫–æ—Ç–∞" to "üßÄ", "–Ø–π—Ü–∞ (–∫–æ–∫–æ—à–∏, –ø—ä–¥–ø—ä–¥—ä—á–∏)" to "ü•ö",
                "–ú–ª—è–∫–æ" to "ü•õ"
            )
            dairyItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = dairyId.toInt(), emoji = emoji))
            }
            
            // Insert sweets
            val sweetItems = listOf(
                "–ó–∞—Ö–∞—Ä (–±—è–ª–∞, –∫–∞—Ñ—è–≤–∞, –ø—É–¥—Ä–∞)" to "üç¨", "–ú–µ–¥" to "üçØ", "–ú–µ–ª–∞—Å–∞" to "üçØ", 
                "–®–æ–∫–æ–ª–∞–¥" to "üç´", "–ö–∞–∫–∞–æ" to "üç´", "–°–ª–∞–¥–∫–∞—Ä—Å–∫–∏ –±–æ–∏" to "üåà",
                "–í–∞–Ω–∏–ª–æ–≤–∞ –∑–∞—Ö–∞—Ä" to "üç¨", "–ë–∞–∫–ø—É–ª–≤–µ—Ä" to "‚ö™", "–°–æ–¥–∞ –±–∏–∫–∞—Ä–±–æ–Ω–∞—Ç" to "‚ö™", 
                "–ñ–µ–ª–∞—Ç–∏–Ω" to "‚ö™", "–í–∞—Ñ–ª–∏" to "üßá", "–ë–∏—Å–∫–≤–∏—Ç–∏" to "üç™",
                "–ö–æ–Ω–¥–µ–Ω–∑–∏—Ä–∞–Ω–æ –º–ª—è–∫–æ" to "ü•õ", "–°–ª–∞–¥–∫–æ" to "üçØ", "–ú–∞—Ä–º–∞–ª–∞–¥" to "üçØ"
            )
            sweetItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = sweetsId.toInt(), emoji = emoji))
            }
            
            // Insert nuts
            val nutItems = listOf(
                "–û—Ä–µ—Ö–∏" to "üå∞", "–ë–∞–¥–µ–º–∏" to "üå∞", "–õ–µ—à–Ω–∏—Ü–∏" to "üå∞", "–§—ä—Å—Ç—ä—Ü–∏" to "ü•ú", 
                "–ö–∞—à—É" to "ü•ú", "–°–ª—ä–Ω—á–æ–≥–ª–µ–¥–æ–≤–∏ —Å–µ–º–∫–∏" to "üåª", "–¢–∏–∫–≤–µ–Ω–∏ —Å–µ–º–∫–∏" to "üå±",
                "–ß–∏—è" to "üå±", "–õ–µ–Ω–µ–Ω–æ —Å–µ–º–µ" to "üå±", "–ö–µ–¥—Ä–æ–≤–∏ —è–¥–∫–∏" to "üå∞", "–ö–æ–∫–æ—Å–æ–≤–∏ —Å—Ç—ä—Ä–≥–æ—Ç–∏–Ω–∏" to "ü••"
            )
            nutItems.forEach { (name, emoji) ->
                ingredientDao.insertIngredient(Ingredient(name = name, categoryId = nutsId.toInt(), emoji = emoji))
            }
            
            // Insert dishes with their ingredients
            val dishIngredientDao = database.dishDao()
            val allIngredients = ingredientDao.getAllIngredientsSync()
            
            // Helper function to get ingredient ID by name
            fun getIngredientId(name: String, ingredients: List<Ingredient>): Int {
                return ingredients.find { it.name == name || it.name.contains(name) }?.id ?: -1
            }
            
            // Insert dishes and their ingredient relationships
            val dishesWithIngredients = listOf(
                "–ü—ä—Ä–∂–µ–Ω–∏ –ö–∞—Ä—Ç–æ—Ñ–∏" to "üçü" to listOf("–ö–∞—Ä—Ç–æ—Ñ–∏", "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ", "–°–æ–ª"),
                "–ß—É—à–∫–∏ –ë—é—Ä–µ–∫" to "ü•ô" to listOf("–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)", "–°–∏—Ä–µ–Ω–µ", "–Ø–π—Ü–∞", "–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ"),
                "–ú–∏—à –ú–∞—à" to "üç≥" to listOf("–Ø–π—Ü–∞", "–°–∏—Ä–µ–Ω–µ", "–î–æ–º–∞—Ç", "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–¢–∞—Ä–∞—Ç–æ—Ä" to "ü•í" to listOf("–ö—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞", "–ö–∏—Å–µ–ª–æ –º–ª—è–∫–æ", "–û—Ä–µ—Ö–∏", "–ß–µ—Å—ä–Ω", "–ö–æ–ø—ä—Ä", "–û–ª–∏–æ", "–°–æ–ª"),
                "–¢–∏–∫–≤–∏—á–∫–∏" to "ü•í" to listOf("–¢–∏–∫–≤–∏—á–∫–∏", "–Ø–π—Ü–∞", "–°–∏—Ä–µ–Ω–µ", "–ö–æ–ø—ä—Ä", "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ", "–°–æ–ª"),
                "–ì—Ä–∞—Ö–æ–≤–∞ –º–∞–Ω–¥–∂–∞" to "üç≤" to listOf("–ì—Ä–∞—Ö", "–ú–æ—Ä–∫–æ–≤–∏", "–õ—É–∫", "–î–æ–º–∞—Ç", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–ó–µ–ª–µ–Ω –±–æ–±" to "ü•ó" to listOf("–ó–µ–ª–µ–Ω —Ñ–∞—Å—É–ª", "–õ—É–∫", "–ú–æ—Ä–∫–æ–≤–∏", "–î–æ–º–∞—Ç", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–°–ø–∞–Ω–∞–∫" to "ü•¨" to listOf("–°–ø–∞–Ω–∞–∫", "–Ø–π—Ü–∞", "–°–∏—Ä–µ–Ω–µ", "–õ—É–∫", "–û–ª–∏–æ", "–°–æ–ª"),
                "–ü–ò–¶–ê" to "üçï" to listOf("–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–ö–∞—à–∫–∞–≤–∞–ª", "–î–æ–º–∞—Ç", "–û–ª–∏–æ", "–°–æ–ª", "–ú–∞—è"),
                "–ö—É—Å-–∫—É—Å" to "üçö" to listOf("–ö—É—Å–∫—É—Å", "–ó–µ–ª–µ–Ω—á—É—Ü–∏ (–º–∏–∫—Å)", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–ú–∞–∫–∞—Ä–æ–Ω–∏" to "üçù" to listOf("–ú–∞–∫–∞—Ä–æ–Ω–∏ / –ø–∞—Å—Ç–∞", "–ö–∞—à–∫–∞–≤–∞–ª", "–ú–∞—Å–ª–æ", "–°–æ–ª"),
                "–°–ø–∞–≥–µ—Ç–∏" to "üçù" to listOf("–°–ø–∞–≥–µ—Ç–∏", "–î–æ–º–∞—Ç", "–ö–∞—à–∫–∞–≤–∞–ª", "–û–ª–∏–æ", "–ß–µ—Å—ä–Ω", "–°–æ–ª"),
                "–û–≤–µ—Å —Å –º–ª—è–∫–æ" to "ü•£" to listOf("–û–≤–µ—Å–µ–Ω–∏ —è–¥–∫–∏", "–ú–ª—è–∫–æ", "–ó–∞—Ö–∞—Ä", "–ú–µ–¥"),
                "–ú—é—Å–ª–∏" to "ü•£" to listOf("–ú—é—Å–ª–∏", "–ú–ª—è–∫–æ", "–ü–ª–æ–¥–æ–≤–µ (–º–∏–∫—Å)", "–ú–µ–¥"),
                "–ü–∞–ª–∞—á–∏–Ω–∫–∏" to "ü•û" to listOf("–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–ú–ª—è–∫–æ", "–Ø–π—Ü–∞", "–ó–∞—Ö–∞—Ä", "–ú–∞—Å–ª–æ", "–°–æ–ª"),
                "–ë–æ–±" to "ü´ò" to listOf("–ë–æ–±", "–õ—É–∫", "–ú–æ—Ä–∫–æ–≤–∏", "–î–æ–º–∞—Ç", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–õ–µ—â–∞" to "ü´ò" to listOf("–õ–µ—â–∞", "–õ—É–∫", "–ú–æ—Ä–∫–æ–≤–∏", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–ü—ä—Ä–∂–µ–Ω–∏ —Ñ–∏–ª–∏–π–∫–∏" to "üçû" to listOf("–•–ª—è–±", "–ú–ª—è–∫–æ", "–Ø–π—Ü–∞", "–û–ª–∏–æ –∑–∞ –ø—ä—Ä–∂–µ–Ω–µ", "–°–æ–ª"),
                "–ë–∞–Ω–∏—Ü–∞" to "ü•ê" to listOf("–ö–æ—Ä–∏ –∑–∞ –±–∞–Ω–∏—Ü–∞", "–°–∏—Ä–µ–Ω–µ", "–Ø–π—Ü–∞", "–ú–ª—è–∫–æ", "–û–ª–∏–æ", "–°–æ–ª"),
                "–ë—É—Ç–µ—Ä–∫–∏" to "ü•™" to listOf("–•–ª—è–±", "–ö–∞—à–∫–∞–≤–∞–ª", "–®—É–Ω–∫–∞", "–î–æ–º–∞—Ç", "–ö—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞", "–ú–∞—Å–ª–æ"),
                "–ì—é–∑–ª–µ–º–µ" to "ü•ô" to listOf("–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–°–∏—Ä–µ–Ω–µ", "–°–ø–∞–Ω–∞–∫", "–û–ª–∏–æ", "–°–æ–ª", "–í–æ–¥–∞"),
                "–ó–∞–ø–µ–∫–∞–Ω–∫–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏" to "üç≤" to listOf("–ö–∞—Ä—Ç–æ—Ñ–∏", "–¢–∏–∫–≤–∏—á–∫–∏", "–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)", "–ö–∞—à–∫–∞–≤–∞–ª", "–Ø–π—Ü–∞", "–ú–ª—è–∫–æ", "–û–ª–∏–æ", "–°–æ–ª"),
                "–ì—é–≤–µ—á–µ —Å –∫–∞—à–∫–∞–≤–∞–ª –∏ —Å–æ—Å –±–∞—Ä–±–µ–∫—é" to "üç≤" to listOf("–ö–∞—Ä—Ç–æ—Ñ–∏", "–ö–∞—à–∫–∞–≤–∞–ª", "–õ—É–∫", "–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–ö—Ä–µ–º —Å—É–ø–∞ —Å –∫—Ä–æ—Ç–æ–Ω–∏" to "üç≤" to listOf("–ö–∞—Ä—Ç–æ—Ñ–∏", "–ú–æ—Ä–∫–æ–≤–∏", "–õ—É–∫", "–°–º–µ—Ç–∞–Ω–∞", "–•–ª—è–±", "–ú–∞—Å–ª–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–ó–µ–ª–µ–Ω—á—É–∫–æ–≤–æ –∫—ä—Ä–∏ —Å –∫–∞—Ä—Ç–æ—Ñ–∏ –∏ –≥—Ä–∞—Ö" to "üçõ" to listOf("–ö–∞—Ä—Ç–æ—Ñ–∏", "–ì—Ä–∞—Ö", "–õ—É–∫", "–ú–æ—Ä–∫–æ–≤–∏", "–ö—ä—Ä–∏", "–ö–æ–∫–æ—Å–æ–≤–æ –º–ª—è–∫–æ", "–û–ª–∏–æ", "–°–æ–ª"),
                "–ü–µ—á–µ–Ω–∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏ —Å –∫–∞—à–∫–∞–≤–∞–ª" to "ü•ó" to listOf("–¢–∏–∫–≤–∏—á–∫–∏", "–ß—É—à–∫–∞ (—á–µ—Ä–≤–µ–Ω–∞, –∑–µ–ª–µ–Ω–∞, –ª—é—Ç–∞)", "–ü–∞—Ç–ª–∞–¥–∂–∞–Ω", "–ö–∞—à–∫–∞–≤–∞–ª", "–û–ª–∏–æ", "–°–æ–ª", "–ß–µ—Ä–µ–Ω –ø–∏–ø–µ—Ä"),
                "–¢–∏–∫–≤–µ–Ω–∏–∫" to "ü•ß" to listOf("–¢–∏–∫–≤–∞", "–ü—à–µ–Ω–∏—á–Ω–æ –±—Ä–∞—à–Ω–æ", "–Ø–π—Ü–∞", "–ó–∞—Ö–∞—Ä", "–û–ª–∏–æ", "–°–æ–ª", "–ö–∞–Ω–µ–ª–∞"),
                "–°–º–µ—Ç–∞–Ω–∞" to "ü•õ" to listOf("–°–º–µ—Ç–∞–Ω–∞"),
                "–®–æ–∫–æ–ª–∞–¥" to "üç´" to listOf("–®–æ–∫–æ–ª–∞–¥"),
                "–ö–∞–∫–∞–æ" to "‚òï" to listOf("–ö–∞–∫–∞–æ", "–ú–ª—è–∫–æ", "–ó–∞—Ö–∞—Ä")
            )
            
            dishesWithIngredients.forEach { (dishInfo, ingredientNames) ->
                val (dishName, emoji) = dishInfo
                val dishId = dishDao.insertDish(Dish(name = dishName, emoji = emoji))
                
                // Add ingredients to dish
                ingredientNames.forEach { ingredientName ->
                    val ingredientId = getIngredientId(ingredientName, allIngredients)
                    if (ingredientId != -1) {
                        dishIngredientDao.insertDishIngredient(DishIngredient(
                            dishId = dishId.toInt(),
                            ingredientId = ingredientId
                        ))
                    }
                }
            }
        }
    }
}